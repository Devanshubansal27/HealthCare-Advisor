import streamlit as st
##import langchain 
import google.generativeai as genai
import os
import pandas as pd
from dotenv import load_dotenv
load_dotenv()


# Set up the Gemini API Key 
genai.configure(api_key=os.getenv('GOOGLE-API-KEY'))

st.set_page_config(page_title="Health Buddy", page_icon="👨‍⚕️", layout="centered")

# Main Title and Description
# Main Title and Description
st.markdown("""
    <div style='text-align: center;'>
        <h1 style='color: #4CAF50;'>👨‍⚕️ Health Buddy</h1>
        <h3>Your Trusted Health Advisor for Well-being and Guidance</h3>
        <p style='color: #555;'>Ask questions, check your BMI, and get personalized health insights instantly.</p>
    </div>
    <hr style="border: 1px solid #4CAF50;">
""", unsafe_allow_html=True)
# User Query Section
st.write("### 🤔 What would you like to know?")
input_text = st.text_input("Ask me anything about health:", placeholder="e.g., How to manage stress?")
submit = st.button("Get Advice")

# Sidebar: BMI Calculator with Improved Layout
st.sidebar.markdown("<h2 style='text-align: center; color: #4CAF50;'>BMI Calculator</h2>", unsafe_allow_html=True)
st.sidebar.markdown("**Calculate your Body Mass Index (BMI) to understand your health status.**")

# Weight and Height Inputs
weight = st.sidebar.text_input("Enter your weight (kg):", placeholder="e.g., 70")
height = st.sidebar.text_input("Enter your height (cm):", placeholder="e.g., 175")
calculate_bmi = st.sidebar.button("Calculate BMI")

# BMI Calculation with Error Handling
try:
    weight = pd.to_numeric(weight)
    height = pd.to_numeric(height)
    if calculate_bmi and weight > 0 and height > 0:
        bmi = weight / (height / 100) ** 2
        bmi_category = (
            "Underweight" if bmi < 18.5 else
            "Normal weight" if 18.5 <= bmi < 24.9 else
            "Overweight" if 25 <= bmi < 29.9 else
            "Obesity"
        )
        st.sidebar.success(f"**Your BMI**: {bmi:.2f} \n**Category**: {bmi_category}")
    elif calculate_bmi:
        st.sidebar.error("Please enter valid numbers for weight and height.")
except ValueError:
    if calculate_bmi:
        st.sidebar.error("Please enter numeric values for weight and height.")

# BMI Interpretation Guide
st.sidebar.markdown("""
    <hr>
    <h4>BMI Categories</h4>
    <ul>
        <li><strong>Underweight:</strong> BMI &lt; 18.5</li>
        <li><strong>Normal weight:</strong> 18.5 - 24.9</li>
        <li><strong>Overweight:</strong> 25 - 29.9</li>
        <li><strong>Obesity:</strong> BMI ≥ 30</li>
    </ul>
""", unsafe_allow_html=True)

# Function to Get AI Response
def get_response(text):
    model = genai.GenerativeModel("gemini-pro")
    if text:
        response = model.generate_content(text)
        return response.text
    else:
        st.warning("Please enter a health question to receive advice!")

# Generate and Display AI Response
if submit:
    response = get_response(input_text)
    st.write("### 🧑‍⚕️ Health Buddy's Response:")
    if response:
        st.info(response)
        st.caption("🔹 Response generated by Gemini AI.")
    else:
        st.write("No response generated.")

# Sidebar Branding
st.sidebar.markdown("<div style='text-align: center;'><strong>Powered by Gemini AI 🌐</strong></div>", unsafe_allow_html=True)

# Footer Disclaimer
st.markdown("""
    <hr>
    <div style='text-align: center; color: #555;'>
        <h4>Disclaimer</h4>
        <p>This platform provides health guidance and should not replace professional medical advice. Always consult a healthcare provider before making health-related decisions.</p>
    </div>
""", unsafe_allow_html=True)
